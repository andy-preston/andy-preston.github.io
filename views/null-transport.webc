---
title: "Debugging and Testing with Symfony's Mailer Component"
tags: php
---
<section><article>
<p>When SwiftMailer was the standard component for sending E. mail in Symfony,
we could use &quot;enqueue&quot; as a simple means of saving E. mails to a text
file that could be easily be tested and debugged.</p>

<p>Often, during testing and debugging, we don't want to bother with actually
sending the E. mail and all that malarkey with transports and protocols.</p>

<p>With the new
<a href="https://symfony.com/doc/current/mailer.html">Symfony Mailer Component</a>
this isn't so easy to do.</p>

<p>But we can, edit our <code>.env.local</code>, <code>.env.dev</code>, or
<code>.env</code> file to include:</p>

<syntax-highlight language="bash">MAILER_URL=null://null</syntax-highlight>

<p>And then edit
<code>vendor/<wbr>symfony/<wbr>mailer/<wbr>Transport/<wbr>NullTransport.php</code>
and paste the following code into the <code>doSend</code> method:</p>

<syntax-highlight language="php">protected function doSend(SentMessage $message): void {
    $now = new \DateTime();
    $envelope = $message->getEnvelope();
    file_put_contents(
        dirname(__DIR__) .
            '../../../../var/mail/' .
            $now->format('Y-m-d-H-i-s'),
        json_encode([
            'sender' => $envelope->getSender()->toString(),
            'recipients' => array_map(function ($recipient) {
                return $recipient->toString();
            }, $envelope->getRecipients()),
            'messageId' => $message->getMessageId(),
            'debug' => $message->getDebug(),
            'message' => $message->getMessage()->toString()
        ])
    );
}</syntax-highlight>

<p>This is just a quick hack-up. The handling of
<code>./var/mail/</code> is hardly what could be called &quot;robust&quot;.
But it's fine for testing and debugging environments.</p>

</article></section>
